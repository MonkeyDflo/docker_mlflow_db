# Have the following environment vars set in shell before running docker-compose
# (suggested values here but can use whatever desired):
# export DB_NAME=mlflowdb
# export DB_USER=mluser
# export DB_PW=<somepassword>
# export DB_ROOTPW=<someotherpassword>
#
# AWS S3 bucket can be used instead of local drive for artifacts store via
# commented-out environment lines below.

version: '3.3'

services:
    db:
        restart: always
        image: mysql/mysql-server:5.7.28
        container_name: mlflow_db
        expose:
            - "3306"
        networks:
            - backend
        environment:
            - MYSQL_DATABASE=${DB_NAME}
            - MYSQL_USER=${DB_USER}
            - MYSQL_PASSWORD=${DB_PW}
            - MYSQL_ROOT_PASSWORD=${DB_ROOTPW}
        volumes:
            - dbdata:/var/lib/mysql

    web:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        expose:
            - "5000"
        networks:
            - frontend
            - backend
        environment:
            - BACKEND=mysql+pymysql://${DB_USER}:${DB_PW}@db:3306/${DB_NAME}
            - ARTIFACTS=/mlruns
          # For artifact store in AWS S3 (note boto was installed in container):
          #  - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          #  - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          #  - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
          #  - ARTIFACTS="s3://mlflow_bucket/mlflow/"
        volumes:
            - mlrun_data:/mlruns

        command: 
            - sh    # (sh allows for var substitution of BACKEND and ARTIFACTS)
            - -c
            - mlflow server 
                --port ${MLFLOW_PORT} 
                --host 0.0.0.0 
                --backend-store-uri $${BACKEND} 
                --default-artifact-root $${ARTIFACTS}
        depends_on:
            - db

    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "80:80"
        networks:
            - frontend
        depends_on:
            - web

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    dbdata:
    mlrun_data:
